<?php
require_once dirname(__FILE__).'/Connexion.class.php';
require_once dirname(__FILE__).'/Auth/OAuth.php';
/**
 * A class to define a Myspace login
 * @author blanchard
 */
class ConnexionMySpace extends Connexion
{
	protected	/*string*/			$socialNetwork = 'Myspace';
	protected	/*OAuthConsumer*/	$oAuthConsumer;
	private		/*OAuthToken*/		$accessToken;
	private		/*OAuthToken*/		$requestToken;
	public function __construct()
	{
		$this->oAuthConsumer	= new OAuthConsumer('ca09cf41d3c047ecbed4eeac8b6f14c7', 'b9e2b88eb7aa4b878f913db25c1bb3f60bcbf3cdb99c47fb99e5aed9d5919eb5', 'http://'.$_SERVER["HTTP_HOST"].ROOTPATH);
		if(isset($_SESSION['requestToken']))
			$this->requestToken	= new OAuthToken($_SESSION['requestToken']['key'], $_SESSION['requestToken']['secret']);
		if(isset($_SESSION['accessToken']))
			$this->accessToken	= new OAuthToken($_SESSION['accessToken']['key'], $_SESSION['accessToken']['secret']);
		if(isset($_GET['connexion'])&&$_GET['connexion']==$this->socialNetwork) // si l'utilisateur a cliqué sur le bouton Myspace
			$this->redirect();
		elseif(!USER_CONNECTED && $accessToken = $this->connect())
		{
			$user		= json_decode($this->httpSignedGet('http://api.myspace.com/v1/user.json'));
			$profile	= json_decode($this->httpSignedGet('http://api.myspace.com/v1/users/'.$user->userId.'/profile.json'));
			$profile2	= json_decode($this->httpSignedGet('http://api.myspace.com/1.0/people/@me/@self'));
			$friends	= json_decode($this->httpSignedGet('http://api.myspace.com/1.0/people/@me/@friends'), true);
			//var_dump($user);
			//var_dump($profile);
			//var_dump($profile2);
			//var_dump($friends['entry']);exit;
			$_SESSION['user'] = new Profile;
			$_SESSION['user']->mymedID				= 'Myspace'.$profile->basicprofile->userId;
			$_SESSION['user']->socialNetworkID		= $profile->basicprofile->userId;
			$_SESSION['user']->socialNetworkName	= 'Myspace';
			$_SESSION['user']->name					= $profile->basicprofile->name;
			$_SESSION['user']->firstName			= $profile2->person->name->givenName;
			$_SESSION['user']->lastName				= $profile2->person->name->familyName;
			$_SESSION['user']->link					= $profile->basicprofile->webUri;
			$_SESSION['user']->hometown				= $profile->hometown;
			$_SESSION['user']->gender				= $profile->gender=='Male'?'M':($profile->gender=='Female'?'F':null);
			$_SESSION['user']->profilePicture		= $profile->basicprofile->largeImage;
			$_SESSION['friends']	= Array();
			foreach($friends['entry'] as $profile)
				$_SESSION['friends'][]	= $profile['person'];
			//var_dump($_SESSION['user']);exit;
			$this->redirectAfterConnection();
		}
	}
	protected /*void*/ function cleanGetVars()
	{
		unset($_GET['oauth_token']);
		unset($_GET['oauth_verifier']);
	}
	private /*void*/ function getRequestToken()// throws CUrlException, HttpException
	{
		$request	= OAuthRequest::from_consumer_and_token($this->oAuthConsumer, null, 'GET', 'http://api.myspace.com/request_token', Array('oauth_callback' => $this->oAuthConsumer->callback_url));
		$request->sign_request(new OAuthSignatureMethod_HMAC_SHA1(), $this->oAuthConsumer, null);
		$response	= $this->send_signed_request($request, false);
		$token = OAuthUtil::parse_parameters($response);
		$_SESSION['requestToken']['key']	= $token['oauth_token'];
		$_SESSION['requestToken']['secret']	= $token['oauth_token_secret'];
		$this->requestToken	= new OAuthToken($token['oauth_token'], $token['oauth_token_secret']);
	}
	private /*void*/ function getAccessToken(/*string*/ $verifier)// throws CUrlException, HttpException
	{
		$request	= OAuthRequest::from_consumer_and_token($this->oAuthConsumer, $this->requestToken, 'GET', 'http://api.myspace.com/access_token', Array('oauth_verifier'=>$verifier, 'oauth_callback' => $this->oAuthConsumer->callback_url));
		$request->sign_request(new OAuthSignatureMethod_HMAC_SHA1(), $this->oAuthConsumer, $this->requestToken);
		$response	= $this->send_signed_request($request, false);
		$token = OAuthUtil::parse_parameters($response);
		unset($_SESSION['requestToken']);
		$_SESSION['accessToken']['key']		= $token['oauth_token'];
		$_SESSION['accessToken']['secret']	= $token['oauth_token_secret'];
		$this->accessToken	= new OAuthToken($token['oauth_token'], $token['oauth_token_secret']);
	}
	private /*void*/ function redirect()
	{
		try
		{
			$this->getRequestToken();
			$redirection	= OAuthRequest::from_request('GET', 'http://api.myspace.com/authorize', Array('oauth_token'=>$this->requestToken->key, 'oauth_callback'=>$this->oAuthConsumer->callback_url));
			$redirection->sign_request(new OAuthSignatureMethod_HMAC_SHA1(), $this->oAuthConsumer, $this->requestToken);
			header('Location: '.$redirection->to_url());
			exit;
		}
		catch(Exception $ex)
		{
			if(defined('DEBUG')&&DEBUG)
				throw $ex;	// renvoyer l'erreur pour le débuggage
			else
				sendError('Impossible de se connecter à '.$this->socialNetwork.'... Merci de renouveler votre demande plus tard.', true);
		}
	}
	private /*bool*/ function connect()
	{
		if(isset($this->accessToken))
			return true;
		elseif(isset($_GET['oauth_token']) && $this->requestToken && $this->requestToken->key === urldecode($_GET['oauth_token']))
		{
			$this->getAccessToken($_GET['oauth_verifier']);
			return true;
		}
		else
			return false;
	}
	protected /*string*/ function httpSignedGet(/*string*/ $url, array $param=Array())
	{
		if(isset($this->accessToken))
			$token	= $this->accessToken;
		elseif(isset($this->requestToken))
			$token	= $this->requestToken;
		else
			$token	= null;
		$request	= OAuthRequest::from_consumer_and_token($this->oAuthConsumer, $token, 'GET', $url, $param);
		$request->sign_request(new OAuthSignatureMethod_HMAC_SHA1(), $this->oAuthConsumer, $token);
		return $this->send_signed_request($request, false);
	}
	/**
	 * Makes an HTTP request to the specified URL
	 *
	 * @param OAuthRequest $request signed request
	 * @param bool $returnResponseHeaders True if resp. headers should be returned.
	 * @return string Response body from the server
	 */
	private /*string*/ function send_signed_request(OAuthRequest $request, /*bool*/ $returnResponseHeaders=true)// throws CUrlException, HttpException
	{
		$http_method	= $request->get_normalized_http_method();
		$url			= $request->get_normalized_http_url();
		$auth_header	= $request->to_header(null);
		$postData		= $request->to_postdata();
		$curl = curl_init($url);
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($curl, CURLOPT_FAILONERROR, false);
		curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);

		if ($returnResponseHeaders)
			curl_setopt($curl, CURLOPT_HEADER, true);
		switch($http_method)
		{
			case 'GET':
				if ($auth_header)
					curl_setopt($curl, CURLOPT_HTTPHEADER, array($auth_header));
				break;
			case 'POST':
				$headers = array('Content-Type: application/atom+xml', $auth_header);
				curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
				curl_setopt($curl, CURLOPT_POST, 1);
				curl_setopt($curl, CURLOPT_POSTFIELDS, $postData);
				break;
			case 'PUT':
				$headers = array('Content-Type: application/atom+xml', $auth_header);
				curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
				curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $http_method);
				curl_setopt($curl, CURLOPT_POSTFIELDS, $postData);
				break;
			case 'DELETE':
				$headers = array($auth_header);
				curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
				curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $http_method);
				break;
		}
		$response = curl_exec($curl);
		if (!$response)
			$ex = new CUrlException(curl_error($curl), curl_errno($curl));
		$httpCode	= curl_getinfo($curl, CURLINFO_HTTP_CODE);
		if ($httpCode<200 || $httpCode>=300)
			$ex = new HttpException($httpCode, $response);
		curl_close($curl);
		if(isset($ex))
			throw $ex;
		return $response;
	}
	/**
	 * Print the connexion's button
	 */
	public /*void*/ function button()
	{
		// remove parasit GET vars
		$get	= $_GET;
		unset($get['connexion']);
		$query_string	= http_build_query($get);
		if($query_string != "")
			$query_string = '&'.$query_string;
?><a href="?connexion=<?=urlencode($this->socialNetwork)?><?=htmlspecialchars($query_string)?>" class="<?=preg_replace('#[^a-z0-9]#','',strtolower($this->socialNetwork))?>"><span><?= $this->socialNetwork?></span></a><?php
	}
}
?>
