<?xml version="1.0" encoding="UTF-8"?>
<!--
Ant build file to run JUnit tests for mymed

Milo Casagrande <milo.casagrande@inria.fr>, 2011
-->
<project name="mymed" default="test" basedir=".">
	<property name="build.dir"           location="build"/>
	<property name="lib.dir"             location="lib" />
	<property name="results.dir"         location="results"/>
	<property name="tests.dir"           location="unit"/>
	<property name="conf.dir"            location="../../../../conf"/>
	<property name="controller.dir"      location="../controller"/>
	<property name="model.dir"           location="../model"/>
	<property name="utils.dir"           location="../utils"/>
	<property name="libs.dir"            location="../../../../lib"/>
	<property name="java.dir"            location="/usr/share/java"/>
	<property name="junit.dir"           location="/usr/share/junit"/>
	<property name="glassfish.dir"       location="../../../../servers/glassfishv3/glassfish/"/>
	<property name="cassandra.dir"       location="../../../../protocols/cassandra/cassandra"/>
	<property name="synapse.dir"         location="../../../../protocols/synapse/jSynapse/src"/>
	<property name="httpcomp.dir"        location="/usr/share/apache-commons/httpcomponents"/>
	<property name="src.dir"             location="${controller.dir}:${model.dir}:${utils.dir}"/>
	<property name="jsynapse.jar"        value="jSynapse.jar"/>
	<property name="mymed.jar"           value="mymed.jar"/>
	<property name="mymedtest.jar"       value="mymedtest.jar"/>

  <!-- Fix the classpath to add the necessary resources -->
	<path id="mymed.classpath" description="Classpath to be used for running the tests">
		<pathelement path="${java.class.path}"/>
		<pathelement location="${conf.dir}"/>
	  <pathelement location="${lib.dir}/mymed.jar"/>
	  <pathelement location="${lib.dir}/jSynapse.jar"/>
	  <pathelement location="${lib.dir}/mymedtest.jar"/>
		<pathelement location="${junit.dir}/junit.jar"/>
	  <pathelement location="."/>
		<!-- Keep this one here, otherwise it is possible to get nasty compilation errors due
		to how JARs are imported on the CLASSPATH, and there could be errors with JARs coming
		from Cassandra -->
		<fileset dir="${glassfish.dir}">
			<include name="**/mail.jar"/>
			<include name="**/javaee.jar"/>
		</fileset>
		<fileset dir="${java.dir}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${libs.dir}">
			<include name="**/*.jar"/>
			<exclude name="apache-cassandra-0.7.6-2.jar"/>
			<!-- Excluding this one since we are recompiling it -->
			<exclude name="jSynapse.jar"/>
			<exclude name="libthrift-0.5.jar"/>
			<exclude name="deployment-javaee-full.jar"/>
		</fileset>
		<fileset dir="${cassandra.dir}/lib">
			<include name="**/*.jar"/>
			<!-- We exclude this JARs here otherwise SLF4J will throw a warning, nothing blocking, but
			not good to see. For more info see: http://www.slf4j.org/codes.html#multiple_bindings
			Cassandra has sl4j binding in its classpath, that's why it complains -->
			<exclude name="slf4j-log4j12-1.6.1.jar"/>
			<exclude name="slf4j-api-1.6.1.jar"/>
			<exclude name="log4j-1.2.16.jar"/>
		</fileset>
		<fileset dir="${httpcomp.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<pathconvert description="Pretty print the classpath" property="echo.path.compile" refid="mymed.classpath" pathsep="${line.separator}|  |--" />

	<target name="init" description="Initialize the necessary directories">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${lib.dir}" />
		<mkdir dir="${results.dir}" />
	</target>

	<target name="synapse" depends="init" description="Compile and create the Synapse JAR">
		<javac srcdir="${synapse.dir}" destdir="${build.dir}" debug="on" fork="true" includeantruntime="true" includejavaruntime="true">
			<classpath refid="mymed.classpath"/>
		</javac>
		<jar destfile="${lib.dir}/${jsynapse.jar}" basedir="${build.dir}" duplicate="preserve" index="true" />
	</target>

	<target name="compile" depends="synapse,cleanbuild" description="Compile the necessary files">
		<javac srcdir="${src.dir}" destdir="${build.dir}" debug="on" fork="true" includeantruntime="true" includejavaruntime="true">
			<classpath refid="mymed.classpath"/>
		</javac>
		<jar destfile="${lib.dir}/${mymed.jar}" basedir="${build.dir}" duplicate="preserve" index="true"/>
	</target>

	<target name="compiletest" depends="compile,cleanbuild" description="Compile the test classes">
		<javac srcdir="${tests.dir}" destdir="${build.dir}" debug="on" fork="yes" includeantruntime="true" includejavaruntime="true">
			<classpath refid="mymed.classpath"/>
			<include name="**/*.java"/>
		</javac>
		<jar destfile="${lib.dir}/${mymedtest.jar}" basedir="${build.dir}" duplicate="preserve" index="true"/>
	</target>

	<target name="test" depends="compiletest" description="Run all the JUnit tests">
		<junit printsummary="yes" haltonfailure="no" showoutput="yes" includeantruntime="true">
			<classpath refid="mymed.classpath"/>
			<test name="com.mymed.tests.unit.MyMedTestSuite" todir="${results.dir}" outfile="TEST-UnitTest.xml"/>
			<formatter type="xml"/>
			<batchtest fork="true"/>
		</junit>
	</target>

	<target name="requesthandler" depends="compiletest" description="Run all the JUnit tests for the RequestHandler">
	  <junit printsummary="yes" haltonfailure="no" showoutput="yes" includeantruntime="true">
	    <classpath refid="mymed.classpath"/>
	     <test name="com.mymed.tests.unit.handler.RequestHandlerSuite" todir="${results.dir}" outfile="TEST-RequestHandler.xml"/>
	     <formatter type="xml"/>
	     <batchtest fork="true"/>
	  </junit>
	</target>

	<target name="cleanbuild" description="Clean the build directory from other directories">
		<delete includeemptydirs="true" failonerror="false">
		  <fileset dir="${build.dir}" includes="**/*"/>
		</delete>
	</target>

	<target name="clean" description="Remove the directories used for the build">
	  <delete dir="${build.dir}" />
		<delete dir="${lib.dir}" />
		<delete dir="${results.dir}" />
	</target>
</project>